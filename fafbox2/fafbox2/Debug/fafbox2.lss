
fafbox2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000006fc  00000790  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000038c  00800102  00800102  00000792  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000792  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000808  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007c1  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000403  00000000  00000000  00001091  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014ed  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00002984  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d8  00000000  00000000  00002a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fd  00000000  00000000  00002d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002e39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_13>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ec ef       	ldi	r30, 0xFC	; 252
  90:	f6 e0       	ldi	r31, 0x06	; 6
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	24 e0       	ldi	r18, 0x04	; 4
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ae 38       	cpi	r26, 0x8E	; 142
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 57 03 	call	0x6ae	; 0x6ae <main>
  b2:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <__vector_13>:
.global TIMER1_COMPA_vect
TIMER1_COMPA_vect:

	//horizontal sync porch - 96 cycles

	push r16 ;2
  ba:	0f 93       	push	r16

	in r16, _SFR_IO_ADDR(SREG) ;1
  bc:	0f b7       	in	r16, 0x3f	; 63
	push r16 ;2
  be:	0f 93       	push	r16

	//adjust interrupt response time

	lds r16, _SFR_MEM_ADDR(TCNT1L) ;2
  c0:	00 91 84 00 	lds	r16, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	cpi r16, 16 ;1
  c4:	00 31       	cpi	r16, 0x10	; 16
	breq sixteen ;1/2
  c6:	41 f0       	breq	.+16     	; 0xd8 <sixteen>
	cpi r16, 15 ;1
  c8:	0f 30       	cpi	r16, 0x0F	; 15
	breq fifteen ;1/2
  ca:	39 f0       	breq	.+14     	; 0xda <fifteen>
	cpi r16, 14 ;1
  cc:	0e 30       	cpi	r16, 0x0E	; 14
	breq fourteen ;1/2
  ce:	31 f0       	breq	.+12     	; 0xdc <fourteen>
	cpi r16, 13 ;1
  d0:	0d 30       	cpi	r16, 0x0D	; 13
	breq thirteen ;1/2
  d2:	29 f0       	breq	.+10     	; 0xde <thirteen>
	cpi r16, 12 ;1
  d4:	0c 30       	cpi	r16, 0x0C	; 12
	breq twelve ;1/2
  d6:	21 f0       	breq	.+8      	; 0xe0 <twelve>

000000d8 <sixteen>:
	...

000000da <fifteen>:
	...

000000dc <fourteen>:
	...

000000de <thirteen>:
	...

000000e0 <twelve>:
twelve:


	//24 cycles from beginning of interrupt (including 16 cycles of HFP and 8 cycles of active pixels)

	push r17 ;2
  e0:	1f 93       	push	r17

	//26 cycles from beginning of interrupt (including 16 cycles of HFP and 10 cycles of active pixels)

	//beginning of Horizontal Sync Porch

	cbi _SFR_IO_ADDR(CONTROL_PORT), HSYNC_PIN ;2
  e2:	58 98       	cbi	0x0b, 0	; 11
	
	push LINE_COUNTER_REGISTER_HIGH ;2
  e4:	df 93       	push	r29
	push LINE_COUNTER_REGISTER_LOW ;2
  e6:	cf 93       	push	r28
	lds LINE_COUNTER_REGISTER_HIGH, faf_lineCounterHigh ;2
  e8:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <faf_lineCounterHigh>
	lds LINE_COUNTER_REGISTER_LOW, faf_lineCounterLow ;2
  ec:	c0 91 8a 04 	lds	r28, 0x048A	; 0x80048a <faf_lineCounterLow>
	//(4) playing = true, new note = false, finish = true/false, enter = true: 50 cycles (+4) -
	//(5) playing = true, new note = false, finish = true/false, enter = false: 42 cycles +6 (from difference in enter = true/false) = 48 (+6) -
	//(6) playing = false, dont care: 19 cycles (+34) -

	//we play sound only on line 255 (lower value of line counter will go through 255 only once)
	ldi r16, 0xFF ;1
  f0:	0f ef       	ldi	r16, 0xFF	; 255
	cpse LINE_COUNTER_REGISTER_LOW, r16 ;1/3
  f2:	c0 13       	cpse	r28, r16
	jmp no_sound_update ;3
  f4:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <no_sound_update>

	push r18 ;2
  f8:	2f 93       	push	r18
	push r19 ;2
  fa:	3f 93       	push	r19
	push r30 ;2
  fc:	ef 93       	push	r30
	push r31 ;2
  fe:	ff 93       	push	r31

	sbis _SFR_IO_ADDR(GENERAL_STATUS_REGISTER), GSR_IS_PLAYING_BIT ;1/2
 100:	f4 9b       	sbis	0x1e, 4	; 30
	rjmp after_sound_update_delay ;2
 102:	3d c0       	rjmp	.+122    	; 0x17e <after_sound_update_delay>

	//14 cycles (1) (3) (4) (5)

	lds r16, faf_currentNoteFrame ;2
 104:	00 91 04 01 	lds	r16, 0x0104	; 0x800104 <faf_currentNoteFrame>
	lds r17, faf_noteDurationDivider ;2
 108:	10 91 00 01 	lds	r17, 0x0100	; 0x800100 <__data_start>
	lds r18, faf_currentNote ;2
 10c:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <faf_currentNote>
	lds r19, faf_notesCount ;2
 110:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <__data_end>

	//22 cycles (1) (3) (4) (5)

	cp r16, r17 ;1
 114:	01 17       	cp	r16, r17
	breq next_note ;1/2
 116:	31 f0       	breq	.+12     	; 0x124 <next_note>
	...
	nop ;1
	nop ;1
	nop ;1

	nop ;1
	nop ;1
 120:	00 00       	nop

	rjmp after_next_note ;2
 122:	16 c0       	rjmp	.+44     	; 0x150 <after_next_note>

00000124 <next_note>:

next_note:

	//25 cycles (1) (3)

	clr r16 ;1
 124:	00 27       	eor	r16, r16
	inc r18 ;1
 126:	23 95       	inc	r18

	cp r18, r19 ;1
 128:	23 17       	cp	r18, r19
	breq playing_finished ;1/2
 12a:	09 f0       	breq	.+2      	; 0x12e <playing_finished>
	rjmp after_next_note ;2
 12c:	11 c0       	rjmp	.+34     	; 0x150 <after_next_note>

0000012e <playing_finished>:
	...
	nop ;1
	nop ;1
	nop ;1 
	nop ;1

	clr r16 ;1
 142:	00 27       	eor	r16, r16
	sts _SFR_MEM_ADDR(TCCR2A), r16 ;2
 144:	00 93 b0 00 	sts	0x00B0, r16	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	sts _SFR_MEM_ADDR(TCCR2B), r16 ;2
 148:	00 93 b1 00 	sts	0x00B1, r16	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	cbi _SFR_IO_ADDR(GENERAL_STATUS_REGISTER), GSR_IS_PLAYING_BIT ;2
 14c:	f4 98       	cbi	0x1e, 4	; 30
	//no need to store not frame or note - just stop playing and exit
	rjmp after_sound_update ;2
 14e:	39 c0       	rjmp	.+114    	; 0x1c2 <after_sound_update>

00000150 <after_next_note>:

after_next_note:

	//31 cycles (1) (4) (5)

	cpi r16, 0 ;1
 150:	00 30       	cpi	r16, 0x00	; 0
	breq fill_in_new_note ;1/2
 152:	41 f0       	breq	.+16     	; 0x164 <fill_in_new_note>
	...

	nop ;1
	nop ;1
	nop ;1

	nop ;1
 160:	00 00       	nop

	rjmp after_fill_in_new_note ;2
 162:	07 c0       	rjmp	.+14     	; 0x172 <after_fill_in_new_note>

00000164 <fill_in_new_note>:

fill_in_new_note:

	//34 cycles (1) (4)

	ldi r30, lo8(faf_notes) ;1
 164:	ec e8       	ldi	r30, 0x8C	; 140
	ldi r31, hi8(faf_notes) ;1
 166:	f4 e0       	ldi	r31, 0x04	; 4

	//we do this only if r16 is 0
	add r30, r18 ;1
 168:	e2 0f       	add	r30, r18
	adc r31, r16 ;1
 16a:	f0 1f       	adc	r31, r16

	ld r19, Z ;2
 16c:	30 81       	ld	r19, Z
	sts _SFR_MEM_ADDR(OCR2A), r19 ;2
 16e:	30 93 b3 00 	sts	0x00B3, r19	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>

00000172 <after_fill_in_new_note>:

after_fill_in_new_note:

	//42 cycles (1) (4) (5)

	inc r16 ;1
 172:	03 95       	inc	r16

	sts faf_currentNote, r18 ;2
 174:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <faf_currentNote>
	sts faf_currentNoteFrame, r16 ;2
 178:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <faf_currentNoteFrame>
	rjmp after_sound_update ;2
 17c:	22 c0       	rjmp	.+68     	; 0x1c2 <after_sound_update>

0000017e <after_sound_update_delay>:
	...

000001c2 <after_sound_update>:

after_sound_update:

	//49 cycles (1) (3) (4) (5) (6)

	pop r31 ;2
 1c2:	ff 91       	pop	r31
	pop r30 ;2
 1c4:	ef 91       	pop	r30
	pop r19 ;2
 1c6:	3f 91       	pop	r19
	pop r18 ;2
 1c8:	2f 91       	pop	r18

	rjmp sound_updated ;2
 1ca:	36 c0       	rjmp	.+108    	; 0x238 <sound_updated>

000001cc <no_sound_update>:
	...

00000238 <sound_updated>:
sound_updated:

	//59 cycles (1) (3) (4) (5) (6) (7)

	//update sound to 100% (50% duty cycle)
	lds r16, _SFR_MEM_ADDR(OCR2A) ;2
 238:	00 91 b3 00 	lds	r16, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	lsr r16 ;1
 23c:	06 95       	lsr	r16
	sts _SFR_MEM_ADDR(OCR2B), r16 ;2
 23e:	00 93 b4 00 	sts	0x00B4, r16	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>

	//74 cycles from beginning of HSP

	sbiw LINE_COUNTER_REGISTER_LOW, 2 ;2
 242:	22 97       	sbiw	r28, 0x02	; 2
	brcs turn_vsync_on ;1/2
 244:	18 f0       	brcs	.+6      	; 0x24c <turn_vsync_on>
	nop ;1
 246:	00 00       	nop
	sbi _SFR_IO_ADDR(CONTROL_PORT), VSYNC_PIN ;2
 248:	59 9a       	sbi	0x0b, 1	; 11
	rjmp skip_turn_vsync_on ;2
 24a:	03 c0       	rjmp	.+6      	; 0x252 <skip_turn_vsync_on>

0000024c <turn_vsync_on>:

turn_vsync_on:
	cbi _SFR_IO_ADDR(CONTROL_PORT), VSYNC_PIN ;2
 24c:	59 98       	cbi	0x0b, 1	; 11
	nop ;1
 24e:	00 00       	nop
	...

00000252 <skip_turn_vsync_on>:
	nop ;1

skip_turn_vsync_on:
	adiw LINE_COUNTER_REGISTER_LOW, 2 ;2
 252:	22 96       	adiw	r28, 0x02	; 2

	//84 cycles from beginning of HSP

	ldi r17, high(35) ;1
 254:	10 e0       	ldi	r17, 0x00	; 0
	cpi LINE_COUNTER_REGISTER_LOW, low(35) ;1
 256:	c3 32       	cpi	r28, 0x23	; 35
	cpc r17, LINE_COUNTER_REGISTER_HIGH ;1
 258:	1d 07       	cpc	r17, r29
	breq turn_pixels_on ;1/2
 25a:	11 f0       	breq	.+4      	; 0x260 <turn_pixels_on>
	nop ;1
 25c:	00 00       	nop
	rjmp skip_turn_pixels_on ;2
 25e:	01 c0       	rjmp	.+2      	; 0x262 <skip_turn_pixels_on>

00000260 <turn_pixels_on>:

turn_pixels_on:
	sbi _SFR_IO_ADDR(GENERAL_STATUS_REGISTER), GSR_ACTIVE_PIXELS_BIT ;2
 260:	f0 9a       	sbi	0x1e, 0	; 30

00000262 <skip_turn_pixels_on>:

skip_turn_pixels_on:
	
	//91 cycles from beginning of HSP

	nop ;1
 262:	00 00       	nop
	//nop ;1
	//nop ;1
	//nop ;1
	//nop ;1
	push r26 ;2
 264:	af 93       	push	r26
	push r27 ;2
 266:	bf 93       	push	r27

	//96 cycles from beginning of HSP

	//horizontal back porch - 48 cycles

	sbi _SFR_IO_ADDR(CONTROL_PORT), HSYNC_PIN ;2
 268:	58 9a       	sbi	0x0b, 0	; 11

	ldi r17, high(515) ;1
 26a:	12 e0       	ldi	r17, 0x02	; 2
	cpi LINE_COUNTER_REGISTER_LOW, low(515) ;1
 26c:	c3 30       	cpi	r28, 0x03	; 3
	cpc r17, LINE_COUNTER_REGISTER_HIGH ;1
 26e:	1d 07       	cpc	r17, r29
	breq turn_pixels_off ;1/2
 270:	21 f0       	breq	.+8      	; 0x27a <turn_pixels_off>
	nop ;1
 272:	00 00       	nop
	nop ;1
 274:	00 00       	nop
	nop ;1
 276:	00 00       	nop
	rjmp skip_turn_pixels_off ;2
 278:	02 c0       	rjmp	.+4      	; 0x27e <skip_turn_pixels_off>

0000027a <turn_pixels_off>:

turn_pixels_off:
	cbi _SFR_IO_ADDR(GENERAL_STATUS_REGISTER), GSR_ACTIVE_PIXELS_BIT ;2
 27a:	f0 98       	cbi	0x1e, 0	; 30
	sbi _SFR_IO_ADDR(GENERAL_STATUS_REGISTER), GSR_VBLANK_BIT ;2
 27c:	f3 9a       	sbi	0x1e, 3	; 30

0000027e <skip_turn_pixels_off>:

skip_turn_pixels_off:

	//11 cycles from beginning of HBP

	ldi r17, high(524) ;1
 27e:	12 e0       	ldi	r17, 0x02	; 2
	cpi LINE_COUNTER_REGISTER_LOW, low(524) ;1
 280:	cc 30       	cpi	r28, 0x0C	; 12
	cpc r17, LINE_COUNTER_REGISTER_HIGH ;1
 282:	1d 07       	cpc	r17, r29
	breq clear_line_counter ;1/2
 284:	29 f0       	breq	.+10     	; 0x290 <clear_line_counter>
	nop ;1
 286:	00 00       	nop
	nop ;1
 288:	00 00       	nop
	nop ;1
 28a:	00 00       	nop
	adiw LINE_COUNTER_REGISTER_LOW, 1 ;2
 28c:	21 96       	adiw	r28, 0x01	; 1
	rjmp skip_clear_line_counter ;2
 28e:	06 c0       	rjmp	.+12     	; 0x29c <skip_clear_line_counter>

00000290 <clear_line_counter>:

clear_line_counter:
	in r17, _SFR_IO_ADDR(GENERAL_STATUS_REGISTER) ;1
 290:	1e b3       	in	r17, 0x1e	; 30
	bst r17, GSR_NEW_BANK_BIT ;1
 292:	12 fb       	bst	r17, 2
	bld r17, GSR_CURRENT_BANK_BIT ;1
 294:	11 f9       	bld	r17, 1
	out _SFR_IO_ADDR(GENERAL_STATUS_REGISTER), r17 ;1
 296:	1e bb       	out	0x1e, r17	; 30
	clr LINE_COUNTER_REGISTER_LOW ;1
 298:	cc 27       	eor	r28, r28
	clr LINE_COUNTER_REGISTER_HIGH	;1
 29a:	dd 27       	eor	r29, r29

0000029c <skip_clear_line_counter>:

	//STORE VALUES

	//CONTROL_DDR is always output - no need to store
	//CONTROL_PORT might be random so save it (i.e. OUTPUT_ENABLE_PIN pin usage during writing)
	in r17, _SFR_IO_ADDR(CONTROL_PORT) ;1
 29c:	1b b1       	in	r17, 0x0b	; 11
	push r17 ;2
 29e:	1f 93       	push	r17

	//LOWER_ADDRESS_DDR is always output outside of interrupt - no need to store it (it is input only here)
	//LOWER_ADDRESS_PORT might be random so save it (i.e. during writing)
	in r16, _SFR_IO_ADDR(LOWER_ADDRESS_PORT) ;1
 2a0:	08 b1       	in	r16, 0x08	; 8
	push r16 ;2
 2a2:	0f 93       	push	r16
	
	//HIGHER_ADDRESS_DDR is always output - no need to store, only 1 pin is overriden as input when in SPI mode
	//HIGHER_ADDRESS_PORT might be random so save it (i.e. during writing)
	in r16, _SFR_IO_ADDR(HIGHER_ADDRESS_PORT) ;1
 2a4:	05 b1       	in	r16, 0x05	; 5
	push r16 ;2
 2a6:	0f 93       	push	r16

	//DATA_DDR is always output - no need to store, set as input only here during reading
	//DATA_PORT might be random so save it (i.e. during writing)
	in r16, _SFR_IO_ADDR(DATA_PORT) ;1
 2a8:	02 b1       	in	r16, 0x02	; 2
	push r16 ;2
 2aa:	0f 93       	push	r16
	//we do not touch HSYNC_PIN
	//we do not touch VSYNC_PIN
	//we set PERIPHERAL_ENABLE_PIN to disable for now (we will turn it on after we set all ports as input), it should be turned off anyway but whatever
	//we do not touch SOUND_PIN - pushing and poping sound bit should not override sound pin behavior
	//we deselect NETWORK_ENABLE_PIN, it should be turned off anyway but whatever
	ori r17, (1<<BANK_SWITCH_PIN | 1<<WRITE_ENABLE_PIN | 1<<READ_ENABLE_PIN | 1<<PERIPHERAL_ENABLE_PIN | 1<<NETWORK_ENABLE_PIN) ;1
 2ac:	1c 6b       	ori	r17, 0xBC	; 188
	out _SFR_IO_ADDR(CONTROL_PORT), r17 ;1
 2ae:	1b b9       	out	0x0b, r17	; 11

	//set port as input with pull-ups, before we open controller buffer
	ldi r16, 0x00 ;1
 2b0:	00 e0       	ldi	r16, 0x00	; 0
	out _SFR_IO_ADDR(LOWER_ADDRESS_DDR), r16 ;1
 2b2:	07 b9       	out	0x07, r16	; 7
	ldi r17, 0xFF ;1
 2b4:	1f ef       	ldi	r17, 0xFF	; 255
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r17 ;1
 2b6:	18 b9       	out	0x08, r17	; 8

	//set port as output with all ones for now, before we open sd buffer, not to select CS line by mistake; no need to change DDR
	out _SFR_IO_ADDR(HIGHER_ADDRESS_PORT), r17 ;1
 2b8:	15 b9       	out	0x05, r17	; 5

	//TODO global register for control port might improve speed (saves instruction cycles)

	//now we enable all peripherals
	in r17, _SFR_IO_ADDR(CONTROL_PORT) ;1
 2ba:	1b b1       	in	r17, 0x0b	; 11
	andi r17, ~(1<<PERIPHERAL_ENABLE_PIN) ;1
 2bc:	1f 7d       	andi	r17, 0xDF	; 223
	out _SFR_IO_ADDR(CONTROL_PORT), r17 ;1
 2be:	1b b9       	out	0x0b, r17	; 11


	//READ INPUT

	in r16, CONTROLLER_PIN ;1
 2c0:	06 b5       	in	r16, 0x26	; 38
	out _SFR_IO_ADDR(CONTROLLER_STATUS_REGISTER), r16 ;1
 2c2:	0a bd       	out	0x2a, r16	; 42


	sbis _SFR_IO_ADDR(GENERAL_STATUS_REGISTER), GSR_ACTIVE_PIXELS_BIT ;1/2
 2c4:	f0 9b       	sbis	0x1e, 0	; 30
	rjmp no_video ;2
 2c6:	59 c1       	rjmp	.+690    	; 0x57a <no_video>

000002c8 <video>:
	//48 cycles from beginning of HBP

	//horizontal active pixels - 640 cycles -> 640 cycles - 512 for activepixels = 128 free pixels / 2 = 64 pixels on each side to make sure video is centered - dont care for now

	//now we disable all peripherals
	ori r17, (1<<PERIPHERAL_ENABLE_PIN) ;1
 2c8:	10 62       	ori	r17, 0x20	; 32
	out _SFR_IO_ADDR(CONTROL_PORT), r17 ;1
 2ca:	1b b9       	out	0x0b, r17	; 11

	//no need to chage higher address

	//now we turn lower back to being output
	ldi r16, 0xFF ;1
 2cc:	0f ef       	ldi	r16, 0xFF	; 255
	out _SFR_IO_ADDR(LOWER_ADDRESS_DDR), r16 ;1
 2ce:	07 b9       	out	0x07, r16	; 7
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 2d0:	08 b9       	out	0x08, r16	; 8

	//set port as floating input, to protect from short-circuit when we do reading
	ldi r16, 0 ;1
 2d2:	00 e0       	ldi	r16, 0x00	; 0
	out _SFR_IO_ADDR(DATA_DDR), r16 ;1
 2d4:	01 b9       	out	0x01, r16	; 1

	//7 cycles from beginning of HAP

	//we copied new bank at the beginning of the new frame, now we test its value and if its 0 then clear it
	sbis _SFR_IO_ADDR(GENERAL_STATUS_REGISTER), GSR_CURRENT_BANK_BIT ;1/2 
 2d6:	f1 9b       	sbis	0x1e, 1	; 30
	andi r17, ~(1<<BANK_SWITCH_PIN) ;1
 2d8:	1f 7e       	andi	r17, 0xEF	; 239
	out _SFR_IO_ADDR(CONTROL_PORT), r17 ;1
 2da:	1b b9       	out	0x0b, r17	; 11


	mov r26, LINE_COUNTER_REGISTER_LOW ;1
 2dc:	ac 2f       	mov	r26, r28
	mov r27, LINE_COUNTER_REGISTER_HIGH ;1
 2de:	bd 2f       	mov	r27, r29
	sbiw r26, 36 ;2
 2e0:	94 97       	sbiw	r26, 0x24	; 36

	//TODO make sure we increment line counter in good place
	//we divide line counter by 2, to doulbe each line and display 240 lines
	lsr r26 ;1
 2e2:	a6 95       	lsr	r26
	cpi r27, 0x01 ;1
 2e4:	b1 30       	cpi	r27, 0x01	; 1
	brne highest_bit_not_set ;1/2
 2e6:	09 f4       	brne	.+2      	; 0x2ea <highest_bit_not_set>
	ori r26, 0b10000000 ;1
 2e8:	a0 68       	ori	r26, 0x80	; 128

000002ea <highest_bit_not_set>:
iszero:
	ldi r26, 2
iszerodalej:
*/
	//ldi r16, 0b10101010
	out _SFR_IO_ADDR(HIGHER_ADDRESS_PORT), r26 ;1
 2ea:	a5 b9       	out	0x05, r26	; 5
	ldi r16, 0 ;1
 2ec:	00 e0       	ldi	r16, 0x00	; 0
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 2ee:	08 b9       	out	0x08, r16	; 8

	//call my_delay


	//starting read will open video buffer
	andi r17, ~(1<<READ_ENABLE_PIN) ;1
 2f0:	1b 7f       	andi	r17, 0xFB	; 251

	//15 cycles from beginning of HAP

	out _SFR_IO_ADDR(CONTROL_PORT), r17 ;1
 2f2:	1b b9       	out	0x0b, r17	; 11
	call my_delay
	call my_delay*/
	//call my_delay
	
	//256 pixels wide = 512 cycles, which leaves us with 128 cycles to do something else (64 on each end)
	inc r16 ;1
 2f4:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 2f6:	08 b9       	out	0x08, r16	; 8
	//call my_delay
	inc r16 ;1
 2f8:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 2fa:	08 b9       	out	0x08, r16	; 8
	//call my_delay
	inc r16 ;1
 2fc:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 2fe:	08 b9       	out	0x08, r16	; 8
	//call my_delay
	inc r16 ;1
 300:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 302:	08 b9       	out	0x08, r16	; 8
	//call my_delay
	inc r16 ;1
 304:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 306:	08 b9       	out	0x08, r16	; 8
	//call my_delay
	inc r16 ;1
 308:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 30a:	08 b9       	out	0x08, r16	; 8
	//call my_delay
	inc r16 ;1
 30c:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 30e:	08 b9       	out	0x08, r16	; 8
	//call my_delay
	inc r16 ;1
 310:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 312:	08 b9       	out	0x08, r16	; 8
	//call my_delay
	inc r16 ;1
 314:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 316:	08 b9       	out	0x08, r16	; 8
	//call my_delay
	inc r16 ;1
 318:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 31a:	08 b9       	out	0x08, r16	; 8
	//call my_delay
	inc r16 ;1
 31c:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 31e:	08 b9       	out	0x08, r16	; 8

	//call my_delay
	inc r16 ;1
 320:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 322:	08 b9       	out	0x08, r16	; 8

	//call my_delay

	//sei

	inc r16 ;1
 324:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 326:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 328:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 32a:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 32c:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 32e:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 330:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 332:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 334:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 336:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 338:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 33a:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 33c:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 33e:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 340:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 342:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 344:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 346:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 348:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 34a:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 34c:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 34e:	08 b9       	out	0x08, r16	; 8
	
	inc r16 ;1
 350:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 352:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 354:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 356:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 358:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 35a:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 35c:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 35e:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 360:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 362:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 364:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 366:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 368:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 36a:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 36c:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 36e:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 370:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 372:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 374:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 376:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 378:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 37a:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 37c:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 37e:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 380:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 382:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 384:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 386:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 388:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 38a:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 38c:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 38e:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 390:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 392:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 394:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 396:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 398:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 39a:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 39c:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 39e:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 3a0:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 3a2:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 3a4:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 3a6:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 3a8:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 3aa:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 3ac:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 3ae:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 3b0:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 3b2:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 3b4:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 3b6:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 3b8:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 3ba:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 3bc:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 3be:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 3c0:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 3c2:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 3c4:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 3c6:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 3c8:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 3ca:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 3cc:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 3ce:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 3d0:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 3d2:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 3d4:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 3d6:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 3d8:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 3da:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 3dc:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 3de:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 3e0:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 3e2:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 3e4:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 3e6:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 3e8:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 3ea:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 3ec:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 3ee:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 3f0:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 3f2:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 3f4:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 3f6:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 3f8:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 3fa:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 3fc:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 3fe:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 400:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 402:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 404:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 406:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 408:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 40a:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 40c:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 40e:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 410:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 412:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 414:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 416:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 418:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 41a:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 41c:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 41e:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 420:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 422:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 424:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 426:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 428:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 42a:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 42c:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 42e:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 430:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 432:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 434:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 436:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 438:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 43a:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 43c:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 43e:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 440:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 442:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 444:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 446:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 448:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 44a:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 44c:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 44e:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 450:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 452:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 454:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 456:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 458:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 45a:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 45c:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 45e:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 460:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 462:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 464:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 466:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 468:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 46a:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 46c:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 46e:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 470:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 472:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 474:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 476:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 478:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 47a:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 47c:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 47e:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 480:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 482:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 484:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 486:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 488:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 48a:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 48c:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 48e:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 490:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 492:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 494:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 496:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 498:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 49a:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 49c:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 49e:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 4a0:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 4a2:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 4a4:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 4a6:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 4a8:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 4aa:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 4ac:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 4ae:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 4b0:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 4b2:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 4b4:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 4b6:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 4b8:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 4ba:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 4bc:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 4be:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 4c0:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 4c2:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 4c4:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 4c6:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 4c8:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 4ca:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 4cc:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 4ce:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 4d0:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 4d2:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 4d4:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 4d6:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 4d8:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 4da:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 4dc:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 4de:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 4e0:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 4e2:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 4e4:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 4e6:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 4e8:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 4ea:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 4ec:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 4ee:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 4f0:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 4f2:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 4f4:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 4f6:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 4f8:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 4fa:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 4fc:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 4fe:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 500:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 502:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 504:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 506:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 508:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 50a:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 50c:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 50e:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 510:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 512:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 514:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 516:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 518:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 51a:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 51c:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 51e:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 520:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 522:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 524:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 526:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 528:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 52a:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 52c:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 52e:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 530:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 532:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 534:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 536:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 538:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 53a:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 53c:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 53e:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 540:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 542:	08 b9       	out	0x08, r16	; 8
	inc r16 ;1
 544:	03 95       	inc	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 546:	08 b9       	out	0x08, r16	; 8
	

	//256 pixels sent
	
	//we stop reading (that will close video buffer) and outputting data
	ori r17, (1<<READ_ENABLE_PIN) ;1
 548:	14 60       	ori	r17, 0x04	; 4
	out _SFR_IO_ADDR(CONTROL_PORT), r17 ;1
 54a:	1b b9       	out	0x0b, r17	; 11

	//return data port to output, we not have any data left on RAM pins as we disabled output
	ldi r16, 0xFF ;1
 54c:	0f ef       	ldi	r16, 0xFF	; 255
	out _SFR_IO_ADDR(DATA_DDR), r16 ;1
 54e:	01 b9       	out	0x01, r16	; 1

	//restore all saved/changed data
	pop r16 ;2
 550:	0f 91       	pop	r16
	out _SFR_IO_ADDR(DATA_PORT), r16 ;1
 552:	02 b9       	out	0x02, r16	; 2
	pop r16 ;2
 554:	0f 91       	pop	r16
	out _SFR_IO_ADDR(HIGHER_ADDRESS_PORT), r16 ;1
 556:	05 b9       	out	0x05, r16	; 5
	pop r16 ;2
 558:	0f 91       	pop	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 55a:	08 b9       	out	0x08, r16	; 8
	pop r16 ;2
 55c:	0f 91       	pop	r16
	out _SFR_IO_ADDR(CONTROL_PORT), r16 ;1
 55e:	0b b9       	out	0x0b, r16	; 11

	sts faf_lineCounterLow, LINE_COUNTER_REGISTER_LOW ;2
 560:	c0 93 8a 04 	sts	0x048A, r28	; 0x80048a <faf_lineCounterLow>
	sts faf_lineCounterHigh, LINE_COUNTER_REGISTER_HIGH ;2
 564:	d0 93 05 01 	sts	0x0105, r29	; 0x800105 <faf_lineCounterHigh>
	pop LINE_COUNTER_REGISTER_LOW ;2
 568:	cf 91       	pop	r28
	pop LINE_COUNTER_REGISTER_HIGH ;2
 56a:	df 91       	pop	r29
	pop r17 ;2
 56c:	1f 91       	pop	r17
	pop r27 ;2
 56e:	bf 91       	pop	r27
	pop r26 ;2
 570:	af 91       	pop	r26
	pop r16 ;2
 572:	0f 91       	pop	r16
	out _SFR_IO_ADDR(SREG), r16 ;1
 574:	0f bf       	out	0x3f, r16	; 63
	pop r16 ;2
 576:	0f 91       	pop	r16

	reti ;4-5 ?
 578:	18 95       	reti

0000057a <no_video>:
	//horizontal active pixels - 640 cycles
	
	//do some reading and writing to SPI here

	//now we disable all peripherals
	ori r17, (1<<PERIPHERAL_ENABLE_PIN) ;1
 57a:	10 62       	ori	r17, 0x20	; 32
	out _SFR_IO_ADDR(CONTROL_PORT), r17 ;1
 57c:	1b b9       	out	0x0b, r17	; 11

	//do not change data port for now
	//no need to chage higher address

	//now we turn lower back to being output
	ldi r16, 0xFF ;1
 57e:	0f ef       	ldi	r16, 0xFF	; 255
	out _SFR_IO_ADDR(LOWER_ADDRESS_DDR), r16 ;1
 580:	07 b9       	out	0x07, r16	; 7
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 582:	08 b9       	out	0x08, r16	; 8


	ldi r16, 0xFF ;1
 584:	0f ef       	ldi	r16, 0xFF	; 255
	cpse LINE_COUNTER_REGISTER_LOW, r16 ;1/3
 586:	c0 13       	cpse	r28, r16
	jmp no_inc ;3
 588:	0c 94 cb 02 	jmp	0x596	; 0x596 <no_inc>

	lds r16, faf_secondsCounter
 58c:	00 91 8b 04 	lds	r16, 0x048B	; 0x80048b <faf_secondsCounter>
	inc r16
 590:	03 95       	inc	r16
	sts faf_secondsCounter, r16
 592:	00 93 8b 04 	sts	0x048B, r16	; 0x80048b <faf_secondsCounter>

00000596 <no_inc>:

no_inc:


	//restore all saved/changed data
	pop r16 ;2
 596:	0f 91       	pop	r16
	out _SFR_IO_ADDR(DATA_PORT), r16 ;1
 598:	02 b9       	out	0x02, r16	; 2
	pop r16 ;2
 59a:	0f 91       	pop	r16
	out _SFR_IO_ADDR(HIGHER_ADDRESS_PORT), r16 ;1
 59c:	05 b9       	out	0x05, r16	; 5
	pop r16 ;2
 59e:	0f 91       	pop	r16
	out _SFR_IO_ADDR(LOWER_ADDRESS_PORT), r16 ;1
 5a0:	08 b9       	out	0x08, r16	; 8
	pop r16 ;2
 5a2:	0f 91       	pop	r16
	out _SFR_IO_ADDR(CONTROL_PORT), r16 ;1
 5a4:	0b b9       	out	0x0b, r16	; 11


	sts faf_lineCounterLow, LINE_COUNTER_REGISTER_LOW ;2
 5a6:	c0 93 8a 04 	sts	0x048A, r28	; 0x80048a <faf_lineCounterLow>
	sts faf_lineCounterHigh, LINE_COUNTER_REGISTER_HIGH ;2
 5aa:	d0 93 05 01 	sts	0x0105, r29	; 0x800105 <faf_lineCounterHigh>
	pop LINE_COUNTER_REGISTER_LOW ;2
 5ae:	cf 91       	pop	r28
	pop LINE_COUNTER_REGISTER_HIGH ;2
 5b0:	df 91       	pop	r29
	pop r17 ;2
 5b2:	1f 91       	pop	r17
	pop r27 ;2
 5b4:	bf 91       	pop	r27
	pop r26 ;2
 5b6:	af 91       	pop	r26
	pop r16 ;2
 5b8:	0f 91       	pop	r16
	out _SFR_IO_ADDR(SREG), r16 ;1
 5ba:	0f bf       	out	0x3f, r16	; 63
	pop r16 ;2
 5bc:	0f 91       	pop	r16

	reti ;4-5 ?
 5be:	18 95       	reti

000005c0 <my_delay>:
	
my_delay:
	

	ldi r18, 0
 5c0:	20 e0       	ldi	r18, 0x00	; 0

000005c2 <pe1>:
pe1:
	ldi r19, 0
 5c2:	30 e0       	ldi	r19, 0x00	; 0

000005c4 <pe2>:
pe2:
	ldi r20, 0
 5c4:	40 e0       	ldi	r20, 0x00	; 0

000005c6 <pe3>:
pe3:
	inc r20
 5c6:	43 95       	inc	r20
	cpi r20, 255
 5c8:	4f 3f       	cpi	r20, 0xFF	; 255
	brne pe3
 5ca:	e9 f7       	brne	.-6      	; 0x5c6 <pe3>

	inc r19
 5cc:	33 95       	inc	r19
	cpi r19, 255
 5ce:	3f 3f       	cpi	r19, 0xFF	; 255
	brne pe2
 5d0:	c9 f7       	brne	.-14     	; 0x5c4 <pe2>

	inc r18
 5d2:	23 95       	inc	r18
	cpi r18, 255
 5d4:	2f 3f       	cpi	r18, 0xFF	; 255
	brne pe1
 5d6:	a9 f7       	brne	.-22     	; 0x5c2 <pe1>
	
 5d8:	08 95       	ret

000005da <initPorts>:
#include <avr\io.h>
#include "fafbox.h"


void initPorts(void) {
	CONTROL_DDR = 0xFF;
 5da:	8f ef       	ldi	r24, 0xFF	; 255
 5dc:	8a b9       	out	0x0a, r24	; 10
	CONTROL_PORT = (1<<HSYNC_PIN | 1<<VSYNC_PIN | 1<<WRITE_ENABLE_PIN | 1<<BANK_SWITCH_PIN | 1<<PERIPHERAL_ENABLE_PIN | 1<<READ_ENABLE_PIN | 0<<SOUND_PIN | 1<<NETWORK_ENABLE_PIN);
 5de:	9f eb       	ldi	r25, 0xBF	; 191
 5e0:	9b b9       	out	0x0b, r25	; 11
	
	LOWER_ADDRESS_DDR = 0xFF;
 5e2:	87 b9       	out	0x07, r24	; 7
	LOWER_ADDRESS_PORT = 0x00;
 5e4:	18 b8       	out	0x08, r1	; 8
	HIGHER_ADDRESS_DDR = 0xFF;
 5e6:	84 b9       	out	0x04, r24	; 4
	HIGHER_ADDRESS_PORT = 0x2;
 5e8:	92 e0       	ldi	r25, 0x02	; 2
 5ea:	95 b9       	out	0x05, r25	; 5
	DATA_DDR = 0xFF;
 5ec:	81 b9       	out	0x01, r24	; 1
	DATA_PORT = 0x00;
 5ee:	12 b8       	out	0x02, r1	; 2
	
	GENERAL_STATUS_REGISTER = 0x00;
 5f0:	1e ba       	out	0x1e, r1	; 30
	CONTROLLER_STATUS_REGISTER = 0xFF; //no input
 5f2:	8a bd       	out	0x2a, r24	; 42
 5f4:	08 95       	ret

000005f6 <initVideo>:

/*
	Method used to init video procedure. It sets up Timer1 with appropriate values and starts timer (although no video will be rendered until we set GLOBAL_INTERRUPT_ENABLE flag with sei()).
*/
void initVideo() {
	TCCR1A = 0;
 5f6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1<<CS10) | (1<<WGM12);
 5fa:	89 e0       	ldi	r24, 0x09	; 9
 5fc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	OCR1AH = high(799);
 600:	83 e0       	ldi	r24, 0x03	; 3
 602:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	OCR1AL = low(799);
 606:	8f e1       	ldi	r24, 0x1F	; 31
 608:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 = (1<<OCIE1A);
 60c:	82 e0       	ldi	r24, 0x02	; 2
 60e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 612:	08 95       	ret

00000614 <fillVRAM>:
	for current bank in use.
*/
void fillVRAM(uint8_t buffer, uint8_t color) {
	//before we write to RAM, we clear WRITE_ENABLE_PIN and READ_ENABLE_PIN, we disable video buffer (because we are writing, not reading) by clearing BUFFER_ENABLE_PIN and controller
	//port by disabling buffer (PERIPHERAL_ENABLE_PIN). These chips pins are inverted, so driving our pin high actually disables component
	CONTROL_PORT |= (1<<WRITE_ENABLE_PIN | 1<<PERIPHERAL_ENABLE_PIN | 1<<READ_ENABLE_PIN | 1<<NETWORK_ENABLE_PIN);
 614:	8b b1       	in	r24, 0x0b	; 11
 616:	8c 6a       	ori	r24, 0xAC	; 172
 618:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 61a:	2f ee       	ldi	r18, 0xEF	; 239
 61c:	47 ea       	ldi	r20, 0xA7	; 167
 61e:	89 e9       	ldi	r24, 0x99	; 153
 620:	21 50       	subi	r18, 0x01	; 1
 622:	40 40       	sbci	r20, 0x00	; 0
 624:	80 40       	sbci	r24, 0x00	; 0
 626:	e1 f7       	brne	.-8      	; 0x620 <fillVRAM+0xc>
 628:	00 c0       	rjmp	.+0      	; 0x62a <fillVRAM+0x16>
 62a:	00 00       	nop
 62c:	9f ee       	ldi	r25, 0xEF	; 239
 62e:	27 ea       	ldi	r18, 0xA7	; 167
 630:	49 e9       	ldi	r20, 0x99	; 153
 632:	91 50       	subi	r25, 0x01	; 1
 634:	20 40       	sbci	r18, 0x00	; 0
 636:	40 40       	sbci	r20, 0x00	; 0
 638:	e1 f7       	brne	.-8      	; 0x632 <fillVRAM+0x1e>
 63a:	00 c0       	rjmp	.+0      	; 0x63c <fillVRAM+0x28>
 63c:	00 00       	nop
		CONTROL_PORT &= ~(1<<BANK_SWITCH_PIN);
	} else {
		CONTROL_PORT |= (1<<BANK_SWITCH_PIN);
	}*/

	for(uint16_t k = 0; k < 240; k++) {
 63e:	20 e0       	ldi	r18, 0x00	; 0
 640:	30 e0       	ldi	r19, 0x00	; 0
		HIGHER_ADDRESS_PORT = k;
		
		for(uint16_t j = 0; j < 256; j++) {
 642:	a0 e0       	ldi	r26, 0x00	; 0
 644:	f0 e0       	ldi	r31, 0x00	; 0
			
			
			if(j < 128) {
				DATA_PORT = k < 120 ? 0b11100000 : 0b00000011;
			} else {
				DATA_PORT = k < 120 ? 0b00011100 : 0b11111111;
 646:	ec e1       	ldi	r30, 0x1C	; 28
 648:	7f ef       	ldi	r23, 0xFF	; 255
		for(uint16_t j = 0; j < 256; j++) {
			//DATA_PORT = (i/15)*16 + (j/16);
			
			
			if(j < 128) {
				DATA_PORT = k < 120 ? 0b11100000 : 0b00000011;
 64a:	60 ee       	ldi	r22, 0xE0	; 224
 64c:	53 e0       	ldi	r21, 0x03	; 3
	} else {
		CONTROL_PORT |= (1<<BANK_SWITCH_PIN);
	}*/

	for(uint16_t k = 0; k < 240; k++) {
		HIGHER_ADDRESS_PORT = k;
 64e:	25 b9       	out	0x05, r18	; 5
		
		for(uint16_t j = 0; j < 256; j++) {
 650:	8a 2f       	mov	r24, r26
 652:	9f 2f       	mov	r25, r31
			//DATA_PORT = (i/15)*16 + (j/16);
			
			
			if(j < 128) {
 654:	80 38       	cpi	r24, 0x80	; 128
 656:	91 05       	cpc	r25, r1
 658:	40 f4       	brcc	.+16     	; 0x66a <fillVRAM+0x56>
				DATA_PORT = k < 120 ? 0b11100000 : 0b00000011;
 65a:	28 37       	cpi	r18, 0x78	; 120
 65c:	31 05       	cpc	r19, r1
 65e:	10 f0       	brcs	.+4      	; 0x664 <fillVRAM+0x50>
 660:	45 2f       	mov	r20, r21
 662:	01 c0       	rjmp	.+2      	; 0x666 <fillVRAM+0x52>
 664:	46 2f       	mov	r20, r22
 666:	42 b9       	out	0x02, r20	; 2
 668:	07 c0       	rjmp	.+14     	; 0x678 <fillVRAM+0x64>
			} else {
				DATA_PORT = k < 120 ? 0b00011100 : 0b11111111;
 66a:	28 37       	cpi	r18, 0x78	; 120
 66c:	31 05       	cpc	r19, r1
 66e:	10 f0       	brcs	.+4      	; 0x674 <fillVRAM+0x60>
 670:	47 2f       	mov	r20, r23
 672:	01 c0       	rjmp	.+2      	; 0x676 <fillVRAM+0x62>
 674:	4e 2f       	mov	r20, r30
 676:	42 b9       	out	0x02, r20	; 2
				//continue;
			//}
				
			//_delay_ms(2000);
			
			LOWER_ADDRESS_PORT = j;
 678:	88 b9       	out	0x08, r24	; 8
			CONTROL_PORT &= ~(1<<WRITE_ENABLE_PIN);
 67a:	5b 98       	cbi	0x0b, 3	; 11
	...
			nop();
			nop();
			nop();
			nop();
			CONTROL_PORT |= (1<<WRITE_ENABLE_PIN);
 684:	5b 9a       	sbi	0x0b, 3	; 11
	}*/

	for(uint16_t k = 0; k < 240; k++) {
		HIGHER_ADDRESS_PORT = k;
		
		for(uint16_t j = 0; j < 256; j++) {
 686:	01 96       	adiw	r24, 0x01	; 1
 688:	81 15       	cp	r24, r1
 68a:	41 e0       	ldi	r20, 0x01	; 1
 68c:	94 07       	cpc	r25, r20
 68e:	11 f7       	brne	.-60     	; 0x654 <fillVRAM+0x40>
		CONTROL_PORT &= ~(1<<BANK_SWITCH_PIN);
	} else {
		CONTROL_PORT |= (1<<BANK_SWITCH_PIN);
	}*/

	for(uint16_t k = 0; k < 240; k++) {
 690:	2f 5f       	subi	r18, 0xFF	; 255
 692:	3f 4f       	sbci	r19, 0xFF	; 255
 694:	20 3f       	cpi	r18, 0xF0	; 240
 696:	31 05       	cpc	r19, r1
 698:	d1 f6       	brne	.-76     	; 0x64e <fillVRAM+0x3a>
 69a:	8f ee       	ldi	r24, 0xEF	; 239
 69c:	97 ea       	ldi	r25, 0xA7	; 167
 69e:	29 e9       	ldi	r18, 0x99	; 153
 6a0:	81 50       	subi	r24, 0x01	; 1
 6a2:	90 40       	sbci	r25, 0x00	; 0
 6a4:	20 40       	sbci	r18, 0x00	; 0
 6a6:	e1 f7       	brne	.-8      	; 0x6a0 <fillVRAM+0x8c>
 6a8:	00 c0       	rjmp	.+0      	; 0x6aa <fillVRAM+0x96>
 6aa:	00 00       	nop
 6ac:	08 95       	ret

000006ae <main>:
 6ae:	2f ee       	ldi	r18, 0xEF	; 239
 6b0:	87 ea       	ldi	r24, 0xA7	; 167
 6b2:	99 e9       	ldi	r25, 0x99	; 153
 6b4:	21 50       	subi	r18, 0x01	; 1
 6b6:	80 40       	sbci	r24, 0x00	; 0
 6b8:	90 40       	sbci	r25, 0x00	; 0
 6ba:	e1 f7       	brne	.-8      	; 0x6b4 <main+0x6>
 6bc:	00 c0       	rjmp	.+0      	; 0x6be <main+0x10>
 6be:	00 00       	nop
		
    }*/
	
	_delay_ms(2000);
	
	initPorts();
 6c0:	0e 94 ed 02 	call	0x5da	; 0x5da <initPorts>
 6c4:	2f ee       	ldi	r18, 0xEF	; 239
 6c6:	87 ea       	ldi	r24, 0xA7	; 167
 6c8:	99 e9       	ldi	r25, 0x99	; 153
 6ca:	21 50       	subi	r18, 0x01	; 1
 6cc:	80 40       	sbci	r24, 0x00	; 0
 6ce:	90 40       	sbci	r25, 0x00	; 0
 6d0:	e1 f7       	brne	.-8      	; 0x6ca <main+0x1c>
 6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <main+0x26>
 6d4:	00 00       	nop
	
	_delay_ms(2000);
	
	initVideo();
 6d6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <initVideo>
 6da:	2f ee       	ldi	r18, 0xEF	; 239
 6dc:	87 ea       	ldi	r24, 0xA7	; 167
 6de:	99 e9       	ldi	r25, 0x99	; 153
 6e0:	21 50       	subi	r18, 0x01	; 1
 6e2:	80 40       	sbci	r24, 0x00	; 0
 6e4:	90 40       	sbci	r25, 0x00	; 0
 6e6:	e1 f7       	brne	.-8      	; 0x6e0 <main+0x32>
 6e8:	00 c0       	rjmp	.+0      	; 0x6ea <main+0x3c>
 6ea:	00 00       	nop
	
	_delay_ms(2000);
	
	fillVRAM(1, 0);
 6ec:	60 e0       	ldi	r22, 0x00	; 0
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	0e 94 0a 03 	call	0x614	; 0x614 <fillVRAM>
	//drawPalette();
	
	sei();
 6f4:	78 94       	sei
	
	while(1) {
		
	}
 6f6:	ff cf       	rjmp	.-2      	; 0x6f6 <main+0x48>

000006f8 <_exit>:
 6f8:	f8 94       	cli

000006fa <__stop_program>:
 6fa:	ff cf       	rjmp	.-2      	; 0x6fa <__stop_program>
